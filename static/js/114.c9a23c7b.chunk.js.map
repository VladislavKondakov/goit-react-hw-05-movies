{"version":3,"file":"static/js/114.c9a23c7b.chunk.js","mappings":"8PAIe,SAASA,IACtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAASF,EAAaG,IAAI,WAAa,IAAnE,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KAkBMC,EAAgB,mCAAG,WAAOC,GAAP,iGAEFC,EAAAA,EAAAA,IAAgBD,GAFd,OAEfE,EAFe,OAGrBJ,EAASI,EAAKC,SAHO,gDAKrBC,QAAQC,MAAM,SAAd,MALqB,yDAAH,sDAexB,OANEC,EAAAA,EAAAA,YAAU,WACRP,EAAiBR,EAAaG,IAAI,UACnC,GAAE,CAACH,KAKJ,4BACE,kBAAOgB,MAAOZ,EAAQa,SAjCE,SAAAC,GACxB,IAAMF,EAAQE,EAAIC,OAAOH,MACzBX,EAAUW,GAEV,IAAMI,EAAkB,IAAIC,gBAAgBrB,GAC9B,KAAVgB,EACFI,EAAgBE,OAAO,UAEvBF,EAAgBG,IAAI,SAAUP,GAGhCf,EAAgBmB,GAEhBZ,EAAiBY,EAClB,EAmBoDI,KAAK,SAEvDlB,EAAMmB,KAAI,SAAAC,GAAI,OACb,4BACE,SAAC,KAAD,CAAMC,GAAE,iBAAYD,EAAKE,IAAzB,SAAgCF,EAAKG,QACpCH,EAAKI,gBACJ,0BACE,gBAAKC,IAAG,yCAAoCL,EAAKI,eAAiBE,IAAI,SAJlEN,EAAKE,GADF,MAYlB,C","sources":["pages/home.jsx"],"sourcesContent":["import { getSearchMovies } from \"api\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useSearchParams } from \"react-router-dom\";\n\nexport default function Home() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filmId, setFilmId] = useState(searchParams.get('filmId') || '');\n  const [films, setFilms] = useState([]);\n\n  const updateQueryString = evt => {\n    const value = evt.target.value;\n    setFilmId(value);\n\n    const newSearchParams = new URLSearchParams(searchParams);\n    if (value === \"\") {\n      newSearchParams.delete('filmId');\n    } else {\n      newSearchParams.set('filmId', value);\n    }\n\n    setSearchParams(newSearchParams);\n\n    fetchMovieSearch(newSearchParams);\n  };\n\n  const fetchMovieSearch = async (params) => {\n    try {\n      const data = await getSearchMovies(params);\n      setFilms(data.results); // Store only the 'results' array\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchMovieSearch(searchParams.get('filmId'));\n  }, [searchParams]);\n\n \n\nreturn (\n  <div>\n    <input value={filmId} onChange={updateQueryString} type=\"text\" />\n    {/* Render the films */}\n    {films.map(film => (\n      <div key={film.id}>\n        <Link to={`/movie/${film.id}`}>{film.title}</Link>\n        {film.backdrop_path && (\n          <div>\n            <img src={`https://image.tmdb.org/t/p/w500${film.backdrop_path}`} alt=\"\" />\n          </div>\n        )}\n      </div>\n    ))}\n  </div>\n);\n}\n"],"names":["Home","useSearchParams","searchParams","setSearchParams","useState","get","filmId","setFilmId","films","setFilms","fetchMovieSearch","params","getSearchMovies","data","results","console","error","useEffect","value","onChange","evt","target","newSearchParams","URLSearchParams","delete","set","type","map","film","to","id","title","backdrop_path","src","alt"],"sourceRoot":""}