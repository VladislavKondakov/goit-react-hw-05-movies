{"version":3,"file":"static/js/114.987e489d.chunk.js","mappings":"uQAIe,SAASA,IACtB,OAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAA4BC,EAAAA,EAAAA,UAASF,EAAaG,IAAI,WAAa,IAAnE,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BH,EAAAA,EAAAA,UAAS,IAAnC,eAAOI,EAAP,KAAcC,EAAd,KAEMC,GAAWC,EAAAA,EAAAA,MAeXC,EAAgB,mCAAG,WAAOC,GAAP,iGAEFC,EAAAA,EAAAA,IAAgBD,GAFd,OAEfE,EAFe,OAGrBN,EAASM,EAAKC,SAHO,gDAKrBC,QAAQC,MAAM,SAAd,MALqB,yDAAH,sDAatB,OAJAC,EAAAA,EAAAA,YAAU,WACRP,EAAiBV,EAAaG,IAAI,UACnC,GAAE,CAACH,KAGF,4BACE,kBAAMkB,SA5BgB,SAACC,GACzBA,EAAIC,iBACJ,IAAMC,EAAkB,IAAIC,gBAAgBtB,GAE7B,KAAXI,EACFiB,EAAgBE,OAAO,UAEvBF,EAAgBG,IAAI,SAAUpB,GAGhCH,EAAgBoB,EACjB,EAiBG,WACE,kBACEI,MAAOrB,EACPsB,SAAU,SAACP,GAAD,OAASd,EAAUc,EAAIQ,OAAOF,MAA9B,EACVG,KAAK,UAEP,mBAAQA,KAAK,SAAb,uBAGDtB,EAAMuB,KAAI,SAACC,GAAD,OACT,4BACE,SAAC,KAAD,CAAOC,MAAO,CAAEC,KAAMxB,GAAYyB,GAAE,iBAAYH,EAAKI,IAArD,SAA4DJ,EAAKK,QAChEL,EAAKM,gBACJ,0BACE,gBACEC,IAAG,yCAAoCP,EAAKM,eAC5CE,IAAI,SANFR,EAAKI,GADN,MAehB,C","sources":["pages/home.jsx"],"sourcesContent":["import { getSearchMovies } from \"api\";\nimport { useEffect, useState } from \"react\";\nimport { Link, useLocation, useSearchParams} from \"react-router-dom\";\n\nexport default function Home() {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [filmId, setFilmId] = useState(searchParams.get('filmId') || '');\n  const [films, setFilms] = useState([]);\n\n  const location = useLocation()\n\n  const updateQueryString = (evt) => {\n    evt.preventDefault();\n    const newSearchParams = new URLSearchParams(searchParams);\n\n    if (filmId === \"\") {\n      newSearchParams.delete('filmId');\n    } else {\n      newSearchParams.set('filmId', filmId);\n    }\n\n    setSearchParams(newSearchParams);\n  };\n\n  const fetchMovieSearch = async (params) => {\n    try {\n      const data = await getSearchMovies(params);\n      setFilms(data.results); // Store only the 'results' array\n    } catch (error) {\n      console.error(\"Error:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchMovieSearch(searchParams.get('filmId'));\n  }, [searchParams]);\n\n  return (\n    <div>\n      <form onSubmit={updateQueryString}>\n        <input\n          value={filmId}\n          onChange={(evt) => setFilmId(evt.target.value)}\n          type=\"text\"\n        />\n        <button type=\"submit\">Search</button>\n      </form>\n      {/* Render the films */}\n      {films.map((film) => (\n        <div key={film.id}>\n          <Link  state={{ from: location }} to={`/movie/${film.id}`}>{film.title}</Link>\n          {film.backdrop_path && (\n            <div>\n              <img\n                src={`https://image.tmdb.org/t/p/w500${film.backdrop_path}`}\n                alt=\"\"\n              />\n            </div>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n"],"names":["Home","useSearchParams","searchParams","setSearchParams","useState","get","filmId","setFilmId","films","setFilms","location","useLocation","fetchMovieSearch","params","getSearchMovies","data","results","console","error","useEffect","onSubmit","evt","preventDefault","newSearchParams","URLSearchParams","delete","set","value","onChange","target","type","map","film","state","from","to","id","title","backdrop_path","src","alt"],"sourceRoot":""}